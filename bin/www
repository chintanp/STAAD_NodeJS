#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('file-upload-exp:server');
var http = require('http');
//var fs = require('fs');
//var LineByLineReader = require('line-by-line');
var STAAD_FILE = "";
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// socket.io stuff
var io  = require('socket.io').listen(server),
  dl  = require('delivery'),
  fs  = require('fs');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//io.sockets.on('connection', socket);

io.sockets.on('connection', function(http_socket) {

  console.log("Connection from server");
  //This function is called when a socket connection is established
  http_socket.on('i am client', console.log);
  http_socket.emit('server_event', "This is from server");
});

// flag to determine the portion of the file // 0 determines the beginning, 1 Joint coordinates, 2 member incidences, and 3 later
var flag = 0;

/*
  Variables for Regular Expressions
 */


var str_space_single = "(\\s)";
var str_space_many = "(\\s+)";
var str_space_some = "(\\s*)";
var str_space_opt = "(\\s)?";

var str_digit_single = "(\\d)";
var str_digit_many = "(\\d+)";
var str_digit_some = "(\\d*)";
var str_digit_opt = "(\\d)?";

var str_dot = "(\\.)";
var str_dot_opt = "(\\.)?";

var str_plus_or_minus = "(\\+|-)";
var str_plus_or_minus_opt = "(\\+|-)?";

var str_semicolon_opt = "(;)?";
var str_any_char_many = "(.*)";

// A float may have a plus or minus sign, some digits, may have a dot, and then some digit
var str_float = str_plus_or_minus_opt + str_digit_some + str_dot_opt + str_digit_some;

// Line number is appears in the beginning and may have spaces in the beginning and a dot in the end.
var str_line_number = str_space_some + str_digit_some + str_dot;

// space + node number + space + x coord + space + y coord + space + z coord + ;(opt)
var str_node_number_coords = str_space_single + str_digit_many + str_space_single + str_float + str_space_single + str_float + str_space_single + str_float + str_semicolon_opt;
var str_node_number_coords_and = str_node_number_coords + str_any_char_many;
var str_node_number_coords_many = "(" + str_space_single + str_digit_many + str_space_single + str_float + str_space_single + str_float + str_space_single + str_float + str_semicolon_opt + ")+";

var str_node_data_result_line = str_line_number + str_any_char_many;
var str_member_data_result_line = str_line_number + str_any_char_many;
var str_member_ends = str_space_single + str_digit_some + str_space_single + str_digit_some + str_space_single + str_digit_some + str_semicolon_opt;
var str_member_ends_and = str_member_ends + str_any_char_many;

// Our regular expression testers

var joint_line = new RegExp(str_node_data_result_line);
var member_line = new RegExp(str_member_data_result_line);
var node_coords = new RegExp(str_node_number_coords_and);
var member_ends = new RegExp(str_member_ends_and);

var nodes = new Array();
var members = new Array();

io.sockets.on('connection', function(socket){

  console.log("Connection established wth client for delivery");
  var delivery = dl.listen(socket);
  delivery.on('receive.success',function(file){
    fs.writeFile(file.name,file.buffer, function(err){
      if(err){
        console.log('File could not be saved.');
      }else{
        console.log('File saved.');
        socket.emit('file_recd', "File has been received.");
        //      STAAD_FILE = file.name;

        var liner = require('./liner');
        var source = fs.createReadStream(file.name);
        source.pipe(liner);
        liner.on('readable', function () {
          var line;
          while (line = liner.read()) {
            console.log("Reading line by line");
            console.log(line);

            var joint_index = line.indexOf("JOINT COORDINATES");
            if(joint_index != -1) {

              console.log("Read Joint coordinates, updating flag");
              flag = 1;
              continue;

            }


            // Empty line tester ---> /^\s*$/.test(line) from http://stackoverflow.com/questions/18724378/check-if-a-line-only-contain-whitespace-and-n-in-js-node-js

            if(line.indexOf("PAGE") != -1 || /^\s*$/.test(line)) continue;

            var member_index = line.indexOf("MEMBER INCIDENCES");

            if(member_index != -1) {

              console.log("All joint coordinates read, found member incidences");
              flag = 2;
              continue;

            }

            // Done reading joints and members
            if( line.indexOf("DEFINE") != -1) {
              flag = 3;
              break;
            }



            // Read the joint coordinates here

            if(flag == 1) {

              console.log("lines now joint coordinates");

              var match_node_line = line.match(joint_line);
              console.log("Matches are: " + match_node_line + match_node_line.length);

              // strip the line number and get the coordinate data in str_remaining
              var str_remaining = match_node_line[4];

              // Parse the coordinate line data to get individual coordinates
              while(str_remaining.length != 0) {

                var match_node_set = str_remaining.match(node_coords);

                var node_number = parseInt(match_node_set[2]);

                nodes[node_number] = new Array();

                var x_c = "", y_c = "", z_c = "";

                for( var i = 0; i <= 3; i++) {

                  // Get rid of the undefineds, replace wth empty strings

                  if( typeof match_node_set[i+4] === "undefined" ) {

                    match_node_set[i+4] = "";

                  }

                  if( typeof match_node_set[i+9] === "undefined" ) {

                    match_node_set[i+9] = "";

                  }

                  if( typeof match_node_set[i+14] === "undefined" ) {

                    match_node_set[i+14] = "";

                  }

                  x_c = x_c + match_node_set[i+4];
                  y_c = y_c + match_node_set[i+9];
                  z_c = z_c + match_node_set[i+14];
                }

                var x = parseFloat(x_c);
                var y = parseFloat(y_c);
                var z = parseFloat(z_c);

                nodes[node_number][0] = x;
                nodes[node_number][1] = y;
                nodes[node_number][2] = z;

                str_remaining = match_node_set[19];

                console.log();

              }
            }

            // Read the member incidences here
            if( flag == 2) {

              var match_member_line = line.match(member_line);

              // strip the line number and get the member incidences in str_remaining
              var str_remaining = match_member_line[4];

              // Parse the coordinate line data to get individual coordinates
              while(str_remaining.length != 0) {

                var match_member_set = str_remaining.match(member_ends);

                var member_number = parseInt(match_member_set[2]);

                members[member_number] = new Array();

                var member_node_left = "", member_node_right = "";

                member_node_left = parseInt(match_member_set[4]);
                member_node_right = parseInt(match_member_set[6]);

                members[member_number][0] = member_node_left;
                members[member_number][1] = member_node_right;

                str_remaining = match_member_set[8];

                console.log();

              }

            }
          }
        })
      };
    });
  });
});



